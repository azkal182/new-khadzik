// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  username String  @unique
  name     String?
  password String
  role     String?

  transactions Transaction[]
  debts        Debt[]
}

model Member {
  id         String   @id @default(uuid())
  name       String
  address    String?  @default("")
  phone      String?  @default("")
  saldo      Decimal  @default(0) @db.Decimal(12, 2)
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  transactions Transaction[]
  debts        Debt[]
}

model Product {
  id           String  @id @default(uuid())
  name         String
  description  String? @default("")
  type         String? @default("")
  regularPrice Decimal @db.Decimal(12, 2)
  packingPrice Decimal @db.Decimal(12, 2)
}

model Debt {
  id            String   @id @default(uuid())
  userId        String
  memberId      String
  name          String
  type          String?  @default("")
  qty           Int?
  price         Decimal? @default(0) @db.Decimal(12, 2)
  debit         Decimal? @default(0) @db.Decimal(12, 2)
  credit        Decimal? @default(0) @db.Decimal(12, 2)
  remainingDebt Decimal? @default(0) @db.Decimal(12, 2)
  createdAt     DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  member Member @relation(fields: [memberId], references: [id])
}

model Transaction {
  id         String   @id @default(uuid())
  memberId   String
  userId     String
  subTotal   Decimal  @db.Decimal(12, 0)
  createdAt  DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  member Member @relation(fields: [memberId], references: [id])
}
